import locale
import logging
import math
import os
import time
import traceback
from pathlib import Path
from threading import Thread
from typing import Dict, Any, Callable

import pymongo
from pymorphy2 import MorphAnalyzer
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    Update, ChatAction, User, CallbackQuery
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, PicklePersistence, \
    ConversationHandler, MessageHandler, Filters, CallbackContext, JobQueue, Job

from CTEStorage import cte
from CachedTelegramEljur import CachedTelegramEljur
from constants import *
from homework import homework_handler, homework
from messages import present_messages
from utility import format_user, opposite_folder, folder_to_string, parse_vendor

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
data_dir = Path(__file__).parent / 'data'
media = Path(__file__).parent / 'media'
if not data_dir.exists():
    os.mkdir(data_dir)
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    filename=str(data_dir / 'bot.log'))
logger = logging.getLogger("BOT")
logger_cte = logging.getLogger('CachedTelegramEljur')
logging.getLogger("requests").setLevel(logging.WARNING)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)
logger.setLevel(logging.INFO)
logger_cte.addHandler(ch)
morph = MorphAnalyzer()
LOGIN, WAIT_LOGIN, WAIT_PASSWORD, MAIN_MENU, CHOOSE_VENDOR, INPUT_VENDOR = range(6)
mongo = pymongo.MongoClient(os.environ.get('mongo_uri'))
db = mongo[os.environ['database']]
data = db['data']
messages = db['messages']
cache_queue = db['cache_queue']


def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def start(update: Update, context: CallbackContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    keyboard = [['–§–∏–∑—Ç–µ—Ö-–õ–∏—Ü–µ–π'], ['–î—Ä—É–≥–∞—è —à–∫–æ–ª–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —ç–ª–∂—É—Ä—É:', reply_markup=reply_markup)
    return CHOOSE_VENDOR


def send_menu(update: Update, context: CallbackContext):
    """
    –í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    keyboard = [['–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', '–û—Ü–µ–Ω–∫–∏'], ['–°–æ–æ–±—â–µ–Ω–∏—è']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ú–µ–Ω—é', reply_markup=reply_markup)


def vendor_handler(update: Update, context: CallbackContext):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    if update.message.text == '–§–∏–∑—Ç–µ—Ö-–õ–∏—Ü–µ–π':
        context.user_data['vendor'] = 'eljur'
        return login_handler(update, context)
    else:
        context.dispatcher.bot.send_chat_action(chat_id=update.message.chat.id, action=ChatAction.RECORD_VIDEO)
        context.dispatcher.bot.send_video(update.message.chat.id,
                                          open(media / 'copy-vendor.mov', 'rb'),
                                          width=2960,
                                          height=416)
        update.message.reply_text(text='–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —ç–ª–∂—É—Ä, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –º–Ω–µ:',
                                  reply_markup=ReplyKeyboardRemove())
        return INPUT_VENDOR


def user_send_vendor(update: Update, context: CallbackContext):
    """
    –í–≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –∏–ª–∏ vendor
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    vendor = parse_vendor(update.message.text)
    context.user_data['vendor'] = vendor
    return login_handler(update, context)


def login_handler(update: Update, context: CallbackContext):
    """
    –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:', reply_markup=ReplyKeyboardRemove())
    return WAIT_LOGIN


def user_send_login(update: Update, context: CallbackContext):
    """
    –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param update: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    :type context: –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    """
    context.user_data['eljur_login'] = update.message.text
    update.message.reply_text(text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    return WAIT_PASSWORD


def user_send_password(update: Update, context: CallbackContext):
    ejuser = CachedTelegramEljur(chat_id=update.message.chat.id, no_messages=True)
    if ejuser.auth(login=context.user_data['eljur_login'],
                   password=update.message.text,
                   vendor=context.user_data['vendor']):
        update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —ç–ª–∂—É—Ä! –í—ã–ø–æ–ª–Ω—è—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
        cte.get_cte(chat_id=update.message.chat.id)  # –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.chat.id not in authorized_chat_ids:
            authorized_chat_ids.append(update.message.chat.id)
        updater.job_queue.run_repeating(check_for_new_messages,
                                        interval=MESSAGES_CHECK_DELAY,
                                        first=MESSAGES_CHECK_DELAY,
                                        context=update.message.chat.id,
                                        name=f'new_messages:{update.message.chat.id}')
        send_menu(update=update, context=context)
        return MAIN_MENU
    else:
        keyboard = [['–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        update.message.reply_text(f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å. '
                                  f'–ï—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ "–î—Ä—É–≥–∞—è —à–∫–æ–ª–∞", '
                                  f'—É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∂—É—Ä–Ω–∞–ª.', reply_markup=reply_markup)
        return ConversationHandler.END


def stop(update: Update, context: CallbackContext):
    user: User = update.message.from_user
    logger.info(f"{user.first_name} {user.username} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞")
    chat_id = user.id
    job_new_messages: Job = job_queue.get_jobs_by_name(f'new_messages:{chat_id}')[0]
    job_new_messages.schedule_removal()
    messages.delete_many({'chat_id': update.message.chat.id})
    cache_queue.delete_many({'chat_id': update.message.chat.id})
    data.delete_one({'chat_id': update.message.chat.id})
    update.message.reply_text('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–æ—Ç–∞. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                              reply_markup=ReplyKeyboardRemove())
    cte.purge_ejuser(chat_id)
    return ConversationHandler.END


def check_for_new_messages(context):
    user_id = context.job.context
    if not data.find_one({'chat_id': user_id}):
        return
    logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}')
    ejuser = cte.get_cte(chat_id=user_id)
    new_messages = ejuser.download_messages_preview(check_new_only=True, limit=100, folder=MessageFolder.INBOX)
    logger.info(f'{len(new_messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}')
    if not new_messages:
        return
    for message in new_messages:
        text = "<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        subject = message['subject']
        files = 'üìé ' if message['with_files'] else ''
        unread = 'üÜï ' if message['unread'] else ''
        text += f"<b>{unread}{files}<i>{format_user(message['user_from'])}</i></b>" \
                f"<pre>    {subject}</pre>\n"
        keyboard = [[InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                                          callback_data=f'message_view_new_{message["id"]}'),
                     InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=user_id, text=text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


def messages_common_part(msgs: Dict[str, Any],
                         folder: str,
                         context: CallbackContext,
                         ejuser: CachedTelegramEljur, unread_only: bool = False):
    total = math.ceil(int(msgs['total']) / 6)
    messages_s = present_messages(chat_id=ejuser.chat_id, msgs=msgs, folder=folder)
    op_folder = opposite_folder(folder=folder)
    op_folder_name = folder_to_string(folder=op_folder)
    messages_s = messages_s[:-1]
    messages_s += f"{folder_to_string(folder=folder)} " \
                  f"- —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{context.user_data['messages_page']}/{total}</b>"
    if op_folder == MessageFolder.SENT:
        unread = ejuser.unread_count()
        if unread > 0:
            messages_s += f'\n–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {unread}\n'
    else:
        unread = 0
    if context.user_data['messages_page'] == 1:
        keyboard = [[InlineKeyboardButton(f'{op_folder_name.lower().capitalize()}',
                                          callback_data=f'page_{op_folder}_1'),
                     InlineKeyboardButton(f'üîÑ', callback_data=f'update_{folder}'),
                     InlineKeyboardButton('‚û°', callback_data=f'page_{folder}_next')]
                    ]
    else:
        keyboard = [[InlineKeyboardButton('‚¨Ö', callback_data=f'page_{folder}_prev'),
                     InlineKeyboardButton('–í –Ω–∞—á–∞–ª–æ', callback_data=f'page_{folder}_1'),
                     InlineKeyboardButton('‚û°', callback_data=f'page_{folder}_next')]]
    if unread > 0 and not unread_only:
        keyboard[0].insert(1, InlineKeyboardButton('üÜï', callback_data=f'page_unread_1'))
    elif unread_only:
        keyboard[0].insert(1, InlineKeyboardButton('üëÅÔ∏è+üÜï', callback_data=f'page_inbox_1'))
    for i in range(0, msgs['count'], 3):
        keyboard.append([InlineKeyboardButton(str(label),
                                              callback_data=f'message_{folder}_{msgs["messages"][label - 1]["id"]}')
                         for label in range(i + 1, i + 4) if label - 1 < len(msgs["messages"])])
    reply_markup = InlineKeyboardMarkup(keyboard)
    return messages_s, reply_markup


def messages_handler(update: Update, context: CallbackContext):
    ejuser = cte.get_cte(chat_id=update.message.chat.id)
    msgs = ejuser.get_messages()
    context.user_data['messages_page'] = 1
    folder = MessageFolder.INBOX
    messages_s, reply_markup = messages_common_part(msgs=msgs, folder=folder, context=context, ejuser=ejuser)
    update.message.reply_text(messages_s, parse_mode=ParseMode.HTML, reply_markup=reply_markup)


def marks_handler(update: Update, context: CallbackContext):
    ejuser = cte.get_cte(chat_id=update.message.chat.id)
    marks = ejuser.marks(last_period=True)
    if marks:
        marks_s = f"–û—Ü–µ–Ω–∫–∏ –∑–∞ <b>{ejuser.periods(show_disabled=False)[-1]['fullname']}</b>\n\n"
        for lesson in marks['lessons']:
            marks_s += "<pre>"
            marks_s += lesson['name']
            if lesson['average'] == 0:
                marks_s += " (–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫)</pre>\n"
            else:
                marks_s += f" (—Å—Ä. {lesson['average']}): </pre>"
                marks_s += ', '.join([mark['value'] for mark in lesson['marks']])
                marks_s += "\n\n"
        update.message.reply_text(marks_s, parse_mode=ParseMode.HTML)
    else:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç–ª–∂—É—Ä—É",
                                  parse_mode=ParseMode.HTML)


def messages_page_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    action = query.data.split('_')[-1]
    if 'messages_page' in context.user_data:
        if action == 'next':
            context.user_data['messages_page'] += 1
        elif action == 'prev':
            context.user_data['messages_page'] -= 1
        elif action.isdigit():
            context.user_data['messages_page'] = int(action)
    else:
        context.user_data['messages_page'] = 1
    folder = query.data.split('_')[1]
    if folder == "unread":
        unread_only = True
        folder = MessageFolder.INBOX
    else:
        unread_only = False
    context.user_data['messages_page'] = max(1, context.user_data['messages_page'])
    ejuser = cte.get_cte(chat_id=query.message.chat.id)
    msgs = ejuser.get_messages(page=context.user_data['messages_page'], folder=folder, unreadonly=unread_only)
    total = math.ceil(int(msgs['total']) / 6)
    if context.user_data['messages_page'] > total:
        context.user_data['messages_page'] = 1
        msgs = ejuser.get_messages(page=context.user_data['messages_page'])
    messages_s, reply_markup = messages_common_part(msgs=msgs,
                                                    folder=folder,
                                                    context=context,
                                                    ejuser=ejuser,
                                                    unread_only=unread_only)
    query.edit_message_text(messages_s, parse_mode=ParseMode.HTML)
    query.edit_message_reply_markup(reply_markup=reply_markup)
    query.answer()


def parse_message(message: dict):
    recipients = ''
    for user in message['user_to'][:RECIPIENTS_PREVIEW_COUNT]:
        if user['middlename']:
            recipients += f"{user['lastname']} {user['firstname'][0]}.{user['middlename'][0]}, "
        else:
            recipients += f"{user['lastname']} {user['firstname']}, "
    recipients = recipients[:-2]
    yet_more = len(message['user_to']) - RECIPIENTS_PREVIEW_COUNT
    and_yet_more = f" –∏ –µ—â—ë {yet_more} {morph.parse('–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π')[0].make_agree_with_number(yet_more).word}" \
        if len(message['user_to']) > RECIPIENTS_PREVIEW_COUNT else ""
    files = ''
    if 'files' in message:
        for file in message['files']:
            files += f'<a href="{file["link"]}">üìé {file["filename"]}</a>\n'
    result = f"<i>–¢–µ–º–∞:</i> <b>{message['subject']}</b>\n" \
             f"<i>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</i> {format_user(message['user_from'])}\n" \
             f"<i>{'–ü–æ–ª—É—á–∞—Ç–µ–ª–∏' if len(message['user_to']) > 1 else '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'}:</i> {recipients}{and_yet_more}\n\n" \
             f"<i>–°–æ–æ–±—â–µ–Ω–∏–µ:\n</i>" \
             f"<pre>{message['text']}</pre>\n" \
             f"{files}"
    return result


def view_message(update: Update, context: CallbackContext):
    query = update.callback_query
    ejuser = cte.get_cte(chat_id=query.message.chat.id)
    context.user_data['recipients_offset'] = 0
    context.user_data['reply'] = None
    message_id = query.data.split('_')[-1]
    if query.data.startswith('message_view_new_'):
        keyboard = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_inbox_{message_id}'),
                     InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]]
        message_folder = 'inbox'
    else:
        message_folder = query.data.split('_')[-2]
        keyboard = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'reply_{message_folder}_{message_id}'),
                     InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'page_{message_folder}_it')]]
    message = ejuser.get_message(msg_id=message_id, force_folder=message_folder)
    result = parse_message(message=message)
    ejuser.mark_as_read(msg_id=message_id, folder=message_folder)
    yet_more = len(message['user_to']) - RECIPIENTS_PREVIEW_COUNT
    if yet_more > 0:
        keyboard.append([InlineKeyboardButton("–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π",
                                              callback_data=f"recipients_{message_folder}_{message_id}_it")])
    chain = ejuser.messages_chain(msg_id=message_id, folder=message_folder)
    pos_in_chain = 0
    for msg in chain:
        if msg['id'] == message_id:
            break
        pos_in_chain += 1
    if len(chain) > 1:
        if pos_in_chain == 0:
            next_msg = chain[pos_in_chain + 1]
            keyboard.append([InlineKeyboardButton("‚û°", callback_data=f"message_{next_msg['folder']}_{next_msg['id']}")])
        else:
            if pos_in_chain + 1 < len(chain):
                next_msg = chain[pos_in_chain + 1]
                prev_msg = chain[pos_in_chain - 1]
                keyboard.append([InlineKeyboardButton("‚¨Ö",
                                                      callback_data=f"message_{prev_msg['folder']}_{prev_msg['id']}"),
                                 InlineKeyboardButton("‚û°",
                                                      callback_data=f"message_{next_msg['folder']}_{next_msg['id']}")])
            else:
                prev_msg = chain[pos_in_chain - 1]
                keyboard.append(
                    [InlineKeyboardButton("‚¨Ö", callback_data=f"message_{prev_msg['folder']}_{prev_msg['id']}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(result, parse_mode=ParseMode.HTML)
    query.edit_message_reply_markup(reply_markup)
    query.answer()


def close_message(update: Update, context: CallbackContext):
    query = update.callback_query
    context.bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
    query.answer()


def message_recipients(update: Update, context: CallbackContext):
    query = update.callback_query
    ejuser = cte.get_cte(chat_id=query.message.chat.id)
    message_id = query.data.split('_')[-2]
    action = query.data.split('_')[-1]
    folder = query.data.split('_')[1]
    if action == 'next':
        context.user_data['recipients_offset'] += RECIPIENTS_PER_PAGE
    elif action == 'prev':
        context.user_data['recipients_offset'] -= RECIPIENTS_PER_PAGE
    context.user_data['recipients_offset'] = max(0, context.user_data['recipients_offset'])
    if 'messages_folder' not in context.user_data:
        context.user_data['messages_folder'] = MessageFolder.INBOX
    offset = context.user_data['recipients_offset']
    message = ejuser.get_message(message_id, force_folder=context.user_data['messages_folder'])
    total = math.ceil(len(message["user_to"]) / RECIPIENTS_PER_PAGE)
    cur_page = offset // RECIPIENTS_PER_PAGE + 1
    recipients = f'<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {cur_page}/{total})</b>\n\n<i>'
    for user in message['user_to'][offset:offset + RECIPIENTS_PER_PAGE]:
        recipients += f"{format_user(user)}, "
    recipients = recipients[:-2]
    recipients += '</i>'
    query.edit_message_text(recipients, parse_mode=ParseMode.HTML)
    if offset > 0:
        keyboard = [[InlineKeyboardButton('‚¨Ö', callback_data=f'recipients_{folder}_{message_id}_prev')]]
    else:
        keyboard = []
    if cur_page != total:
        if offset > 0:
            keyboard[0].append(InlineKeyboardButton('‚û°', callback_data=f'recipients_{folder}_{message_id}_next'))
        else:
            keyboard = [[InlineKeyboardButton('‚û°', callback_data=f'recipients_{folder}_{message_id}_next')]]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'message_{context.user_data["messages_folder"]}'
                                                                 f'_{message_id}')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_reply_markup(reply_markup)
    query.answer()


def message_reply(update: Update, context: CallbackContext):
    query: CallbackQuery = update.callback_query
    message_id = query.data.split('_')[-1]
    folder = query.data.split('_')[-2]
    ejuser = cte.get_cte(chat_id=query.message.chat.id)
    message = ejuser.get_message(message_id)
    result = parse_message(message=message)
    result += '\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    context.user_data['write_answer_message_id'] = query.message.message_id
    query.edit_message_text(result, parse_mode=ParseMode.HTML)
    context.user_data['reply'] = message_id
    keyboard = [[InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f'message_{folder}_{message_id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_reply_markup(reply_markup)
    query.answer()


def just_message(update: Update, context: CallbackContext):
    if 'reply' in context.user_data and context.user_data['reply']:
        ejuser = cte.get_cte(chat_id=update.message.chat.id)
        message_id = context.user_data['reply']
        context.user_data['reply'] = None
        reply_text = update.message.text
        keyboard = [[InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data='close'),
                     InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏—è", callback_data='page_inbox_it')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if ejuser.reply_message(replyto=message_id, text=reply_text):
            message = ejuser.get_message(message_id)
            result = parse_message(message=message)
            result += f'\n\n<b>–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:</b> \n<pre>{reply_text}</pre>'
            context.bot.edit_message_text(result, message_id=context.user_data['write_answer_message_id'],
                                          chat_id=update.message.from_user.id,
                                          parse_mode=ParseMode.HTML, reply_markup=reply_markup)
            context.bot.delete_message(chat_id=update.message.chat.id, message_id=update.message.message_id)
        else:
            update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ', reply_markup=reply_markup)
    else:
        send_menu(update=update, context=context)


# noinspection PyBroadException
def cache_full_messages_task():
    while True:
        for chat_id in authorized_chat_ids:
            time_begin = time.time()
            try:
                ejuser = cte.get_cte(chat_id=chat_id)
                ejuser.cache_full_messages()
            except Exception:
                logger.error(f'–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_id}, traceback:\n{traceback.format_exc()}')
            logger.debug(f'–†–∞–±–æ—Ç–∞ –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ '
                         f'–∑–∞ {(int(time.time() - time_begin) * 1000)} ms')
        time.sleep(MESSAGES_CACHE_DELAY)


def update_messages(update: Update, context: CallbackContext):
    query = update.callback_query
    folder = query.data.split('_')[-1]
    ejuser = cte.get_cte(chat_id=query.message.chat.id)
    ejuser.update_read_state(folder=folder)
    context.user_data['messages_page'] = 1
    msgs = ejuser.get_messages(page=context.user_data['messages_page'], folder=folder)
    messages_s, reply_markup = messages_common_part(msgs=msgs, folder=folder, context=context, ejuser=ejuser)
    query.edit_message_text(messages_s, parse_mode=ParseMode.HTML)
    query.edit_message_reply_markup(reply_markup=reply_markup)
    query.answer()


def build_fallback(text: str) -> Callable:
    def fallback_func(update: Update, context: CallbackContext):
        update.message.reply_text(text)

    return fallback_func


if __name__ == '__main__':
    persistence = PicklePersistence(filename=str(data_dir / 'persistence.pickle'))
    updater: Updater = Updater(os.environ["token"], use_context=True, persistence=persistence)

    callback_queries = [
        {'callback': login_handler, 'pattern': '^login$'},
        {'callback': homework_handler, 'pattern': '^homework_[0-9.]*$'},
        {'callback': messages_page_handler, 'pattern': '^(page_inbox_|page_sent_|page_unread_)(prev|next|it|[0-9]*)*$'},
        {'callback': view_message, 'pattern': '^(message_inbox_|message_sent_|message_view_new_)[0-9]*$'},
        {'callback': message_reply, 'pattern': '^(reply_inbox_|reply_sent_)[0-9]*$'},
        {'callback': update_messages, 'pattern': '^(update_inbox|update_sent)$'},
        {'callback': message_recipients, 'pattern': '^(recipients_inbox_|recipients_sent_)[0-9]*_(prev|next|it)$'},
        {'callback': close_message, 'pattern': '^close$'}
    ]
    for param in callback_queries:
        updater.dispatcher.add_handler(CallbackQueryHandler(**param))
    updater.dispatcher.add_error_handler(error)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start),
                      MessageHandler(Filters.regex('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑'), login_handler)],
        states={
            CHOOSE_VENDOR: [MessageHandler(Filters.regex('(–§–∏–∑—Ç–µ—Ö-–õ–∏—Ü–µ–π|–î—Ä—É–≥–∞—è —à–∫–æ–ª–∞)'), vendor_handler),
                            MessageHandler(Filters.text, build_fallback('–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É'))],
            INPUT_VENDOR: [CommandHandler('stop', stop), MessageHandler(Filters.text, user_send_vendor)],
            # LOGIN: [MessageHandler(Filters.regex('–í–æ–π—Ç–∏ –≤ —ç–ª–∂—É—Ä'), login_handler)],
            WAIT_LOGIN: [CommandHandler('stop', stop), MessageHandler(Filters.text, user_send_login)],
            WAIT_PASSWORD: [CommandHandler('stop', stop), MessageHandler(Filters.text, user_send_password)],
            MAIN_MENU: [MessageHandler(Filters.regex('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'), homework),
                        MessageHandler(Filters.regex('–°–æ–æ–±—â–µ–Ω–∏—è'), messages_handler),
                        MessageHandler(Filters.regex('–û—Ü–µ–Ω–∫–∏'), marks_handler),
                        CommandHandler('stop', stop),
                        MessageHandler(Filters.text, just_message)],
        },
        fallbacks=[CommandHandler('stop', stop)],
        name="bot_conversation",
        persistent=True,
        per_message=False
    )

    updater.dispatcher.add_handler(conv_handler)
    authorized_chat_ids = [user['chat_id'] for user in data.find({})]
    job_queue: JobQueue = updater.job_queue

    for uid in authorized_chat_ids:
        job_queue.run_repeating(check_for_new_messages,
                                interval=MESSAGES_CHECK_DELAY,
                                first=MESSAGES_CHECK_DELAY,
                                context=uid,
                                name=f'new_messages:{uid}')

    Thread(target=cache_full_messages_task, daemon=True, name='Cache-Full').start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()

    # –†–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–º–µ—Ç Ctrl-C –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–∏—Ç SIGINT,
    # SIGTERM or SIGABRT
    updater.idle()
